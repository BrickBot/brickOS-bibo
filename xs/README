This is XS: Lisp on Lego MindStorms.

-----------------------------------------------------------------------
IMPORTANT USAGE NOTES
 * XS memory requirements may dictate use of a reduced kernel.  Back in
   the BrickOS 0.2.6.10 XS implementation, creator Taiichi Yuasa
   recommended disabling the following configurations:
    - CONF_SETJMP
    - CONF_LR_HANDLER
    - CONF_RCX_MESSAGE
    - CONF_VIEW_BUTTON
   In newer kernels, disabling the following is also recommended:
    - CONF_DCC
 * XS will function without CONF_ASCII; however, "puts" and "putc"
   functionality will be limited.  Without CONF_ASCII defined, puts
   will always display "ASCII" and putc will dispaly a '-' in the
   specified position.
 * For autonomous programs, the demo program rover-watcher is suggested
   as a starting point for testing basic, autonomous XS programming.
-----------------------------------------------------------------------

For the language specification of XS, see the XS Reference Manual
which can also be downloaded from www.xslisp.com.

-----------------------------------------------------------------------
XS Copyright 2003, Taiichi Yuasa
The project of XS is sponsored by the Information-technology Promotion
Agency (IPA) of Japan as an Exploratory Software Project.
-----------------------------------------------------------------------

XS was originally written for a slightly modified version of
brickOS-0.2.6; effort has been made to bring XS up to a current version.

XS executables:

	xs: gcc -o xs -DJOINT -DONLINE front.c
		The evaluator is linked with the frontend,
		i.e., xs behaves as an ordinary Lisp system.

	xs-host: gcc -o xs-host front.c
		The frontend generates input code to be embedded in
		the evaluator running on Unix.
		The generated code is stored in file "xsout-host".

	eval-host: gcc -o eval-host eval.c
		The evaluator runs on Unix, by executing the code generated by xs-host.
		The code in "xsout-host" is #include'd in the source of the evaluation.
		Therefore, remake eval-host each time "xsout-host" is created.

	xs-rcx: gcc -o xs-rcx -DRCX front.c
		The frontend generates input code to be embedded in
		the evaluator running on RCX.
		The generated code is stored in file "xsout-rcx".

	eval-rcx.lx: h8300-gcc -DRCX eval.c
		The evaluator runs on RCX, by executing the code generated by xs-rcx.
		The code in "xsout-rcx" is #include'd in the source of the evaluation.
		Therefore, remake eval-rcx.lx each time "xsout-rcx" is created.

	xs-ir: gcc -o xs-ir -DRCX -DIRCOM -DONLINE front.c
		The frontend communicates with the RCX evaluator through the
		IR port.

	eval-ir.lx: h8300-gcc -DRCX -DIRCOM -DONLINE eval.c
		The evaluator runs on RCX, by communicating with the frontend
		through the IR port.

	The preprocessor macros have the following meanings:
	
		RCX: The evaluator runs on the RCX.
		JOINT: The evaluator is linked with the frontend.
		IRCOM: The frontend commuicates with the evaluator
		       through the IR port.
		ONLINE: The frontend can receive messages from the evaluator. 

top level forms:

	(DEFINE sym expr)

	(DEFINE (sym expr* [. expr]) expr*)

	(LOAD string)

	(LAST-VALUE)

	(BYE)

	(TRACE sym)
	(UNTRACE sym)

	expr

special forms:

	(QUOTE object)
	(LAMBDA (expr* [. expr]) expr*)

	(SET! sym expr)
		Returns the value of expr.

	(IF expr expr [expr])
		The optional expr defaults to ().

	(BEGIN expr*)
		Returns () if no expr is supplied.

	(LET [sym] ((sym expr)*) expr*)
	(LET* ((sym expr)*) expr*)
	(LETREC ((sym expr)*) expr*)
		Returns () if the body is empty.

	(AND expr*)
	(OR expr*)

	(CATCH expr expr*)
		Returns () if the body is empty.

	(WITH-WATCHER ((expr expr*)*) expr*)
		Returns () if the body is empty.

	(WAIT-UNTIL expr)

expressions:

	special-form
	(expr expr*)
	sym
	int
	string
	char
	#t
	#f
	()

predefined functions:

	(CAR pair)
	(CDR pair)
	(CONS object object)
	(SET-CAR! pair object)
	(SET-CDR! pair object)
	(PAIR? object)
	(NULL? object)

	(NOT object)

	(LIST object*)
	(LIST* object* object)
	(LIST-REF list int)
	(APPEND [list* object])
	(ASSOC object a-list)
	(MEMBER object list)
	(LENGTH list)
	(REVERSE list)

	(EQ? object object)
	(BOOLEAN? object)

	(+ int*)
	(- int int*)
	(* int*)
	(/ int int)
	(REMAINDER int int)
	(< int+)
	(> int+)
	(= int+)
	(>= int+)
	(<= int+)
	(LOGAND int int)
	(LOGIOR int int)
	(LOGXOR int int)
	(LOGSHL int int)
	(LOGSHR int int)
	(RANDOM int)
	(INTEGER? object)

		constants:
			:MAX-INT  :MIN-INT

	(TRACE-CALL symbol function list)
	(APPLY function object* list)
	(FUNCTION? object)

	(SYMBOL? object)

	(THROW object object)

	(GC)
		Returns the number of free cells.

	(IN-RANGE?)

	(MOTOR {:A|:B|:C} {:OFF|:FORWARD|:BACK|:BRAKE})
	(SPEED {:A|:B|:C} int)
		Returns the second argument, so that multiple motors can be
		set up with nested calls such as (MOTOR :A (MOTOR :C :OFF)).
		constants:
			:A  :B  :C
			:OFF  :FORWARD  :BACK  :BRAKE
			:MAX-SPEED

	(LIGHT-ON {1|2|3})
	(LIGHT-OFF {1|2|3})
		Returns the argument.

	(LIGHT {1|2|3})

		constants:
			:WHITE  :BLACK

	(ROTATION-ON {1|2|3})
	(ROTATION-OFF {1|2|3})
		Returns the argument.

	(ROTATION {1|2|3})
		Returned value n means (360/16)*n degree.

	(TEMPERATURE {1|2|3})
		In Celsius.

	(TOUCHED? {1|2|3})

	(PLAY ((pitch . length)*))
		Returns ().
		If the a-list is too long, returns the latter part that is not
		played.

	(PLAYING?)

		constants:
			:A0  :Am0  ... :Gm8  :A8
			:La0  :La#0  ... :So#8  :La8
			:PAUSE

	(PRESSED?)
		Returns #t if the Prgm button has been pressed recently.

	(PUTS (int*))
		Returns ().
		If the list is too long, returns the latter part that is not
		displayed.

	(PUTC int int)
		Returns ().
	(CLS)
		Returns ().

	(BATTERY)
		In 1/10 Volts.

	(RESET-TIME)
		Returns 0 usually.

	(TIME)
		In 1/10 secs.  Overflows in about 13 minutes.

	(SLEEP int)
		In 1/10 secs.
		Returns the argument.

	(READ)
	(WRITE object)
	(READ-CHAR)
	(WRITE-CHAR int)
	(READ-LINE)
	(WRITE-STRING (int*))
