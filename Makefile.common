### ==========================================================================
###  $Id: Makefile.common 606 2007-11-14 22:02:48Z hoenicke $
###  FILE: Makefile.common - definitions common to most brickOS Makefiles
###  bibo - another LEGO MindStorms RCX OS
### --------------------------------------------------------------------------
###       (this file is included by Makefiles that build programs)

# ----------------------------------------------------------------------------
#   Variable declarations
# ----------------------------------------------------------------------------

#  User application libraries. Comment out if linking
#  them statically to kernel in Makefile.kernel.
#CROSSLIBS = -lc -lmint -lfloat -lc++ -lgpc -loogpc
CROSSLIBS = -lc -lmint -lfloat -lc++

#  Defines for build of native parts: utils and other host-run programs
#
COPT   =-g -Os -fno-builtin -fomit-frame-pointer
CWARN  =-Wall
CINC   =
CFLAGS =$(COPT) $(CWARN) $(CINC)

#  Defines for build of cross-compiled parts: firmware, demo programs
#
CROSSCOPT  =$(COPT) -mquickcall
CROSSCWARN =$(CWARN)
CROSSCINC  =-I$(INCLUDEDIR) -I$(KERNELCONFIGDIR)
CROSSCFLAGS   =$(CROSSCOPT) $(CROSSCWARN) $(CROSSCINC) $(CROSSCDEFINES)
CROSSCXXFLAGS =-DCXX -fno-rtti -fno-exceptions $(CROSSCFLAGS)
CROSSPFLAGS   =$(CROSSCFLAGS) --extended-syntax --unit-path=$(BRICKOS_ROOT)/lib/p --automake


#  Defines for programs and scripts
#
CROSSAS =$(CROSSTOOLPREFIX)as$(CROSSTOOLSUFFIX)
CROSSAR =$(CROSSTOOLPREFIX)ar$(CROSSTOOLSUFFIX)
CROSSLD =$(CROSSTOOLPREFIX)ld$(CROSSTOOLSUFFIX)
CROSSNM =$(CROSSTOOLPREFIX)nm$(CROSSTOOLSUFFIX)
CROSSOBJCOPY =$(CROSSTOOLPREFIX)objcopy$(CROSSTOOLSUFFIX)
CROSSOBJDUMP =$(CROSSTOOLPREFIX)objdump$(CROSSTOOLSUFFIX)
CROSSRANLIB  =$(CROSSTOOLPREFIX)ranlib$(CROSSTOOLSUFFIX)
CROSSCC  =$(CROSSTOOLPREFIX)gcc$(CROSSTOOLSUFFIX)
CROSSCXX =$(CROSSTOOLPREFIX)g++$(CROSSTOOLSUFFIX)
CROSSGPC =$(CROSSTOOLPREFIX)gpc$(CROSSTOOLSUFFIX)

MERGEMAP =$(UTILDIR)/merge-map$(EXT)
FIXDEPS	 =$(UTILDIR)/fixdeps$(EXT)
GENLDS   =$(UTILDIR)/genlds$(EXT)
WRITELX	 =$(UTILDIR)/writelx$(EXT)

ARCH := $(shell $(CROSSCC) -dumpmachine)


#  Linker command files dynamic executables  (variable "$(KERNEL_FILES_BASE)" is without the extension).
#
KERNEL_FILES_BASE = $(KERNELDIR)/$(KERNEL)
DYNAMIC_LDS = $(KERNEL_FILES_BASE).lds
DLDFLAGS    = -T $(DYNAMIC_LDS) -relax -L$(LIBDIR)


# ----------------------------------------------------------------------------
#   Base address determination for relocation info
# ----------------------------------------------------------------------------
BASE1_DEFAULT = 0xb000
BASE2_DEFAULT = 0xb210

GET_BASE_FROM_FILE = $(shell [ -e $(2) ] && cat $(2) | grep -E ^$(1)[[:space:]]*=[[:space:]]*0x[0-9A-Fa-f]{4}$ | sed s/$(1)[[:space:]]*=[[:space:]]*// )
GET_BASE_FROM_LDS  = $(call GET_BASE_FROM_FILE,$(1),$(DYNAMIC_LDS))

# Tracking BASE1 and BASE2 in the Makefile provides fallback support if unable
#   to read the dynamic LDS file, but such static tracking breaks support for
#   dynamically installing and working with different kernels. Leaving support
#   for static BASE tracking for if needed but disabling by default.
ifdef TRACK_BASE_IN_MAKEFILE
#  Base addresses updated from $(DYNAMIC_LDS) in kernel/Makefile.sub, target BaseAddresses
#  (Values should be checked as kernel changes but kept as backup if GET_BASE fails)
BASE1 = 0xad30
BASE2 = 0xaf40

# Use precedence ordering for obtaining BASE1 and BASE2 values:
# $(BASEx) value from $(DYNAMIC_LDS) file, $(BASEx), and then $(BASEx)_DEFAULT
GET_BASE = $(or $(call GET_BASE_FROM_LDS,$(1)),$($(1)),$($(1)_DEFAULT))

# Empty if the base has not changed, new base value if it has changed
BASE_CHANGED = $(if $(findstring $(call GET_BASE_FROM_FILE,$(1),Makefile.common),$(call GET_BASE,$(1))),,$(call GET_BASE,$(1)))

# Update the BASE1 and BASE2 addresses in Makefile.common only if there has been a change
BaseAddresses: $(KERNEL_FILES_BASE).lds
	[ -z '$(call BASE_CHANGED,BASE1)' ] || sed -i -r 's/^BASE1[[:space:]]*=[[:space:]]*0x[0-9A-Fa-f]{4}$$/BASE1 = $(call GET_BASE,BASE1)/' Makefile.common
	[ -z '$(call BASE_CHANGED,BASE2)' ] || sed -i -r 's/^BASE2[[:space:]]*=[[:space:]]*0x[0-9A-Fa-f]{4}$$/BASE2 = $(call GET_BASE,BASE2)/' Makefile.common

kernel:: BaseAddresses
else
# Alway lookup BASE1 and BASE2 from the dynamic LDS file
GET_BASE = $(or $(call GET_BASE_FROM_LDS,$(1)),$(error ERROR: Unable to get $(1) from the "$(DYNAMIC_LDS)" dynamic LDS file))
endif


# ----------------------------------------------------------------------------
#   Targets for building of cross-compiled parts: firmware, demo programs
# ----------------------------------------------------------------------------

############ new dynamic executables stuff
#  How to build executables dynamically linked to the kernel 
#  Set DYNAMIC_TEXT, DOBJECTS, DYNAMIC_LDS appropriately.

%.dcoff: %.o %.a $(DYNAMIC_LDS)
	$(CROSSLD) $(DLDFLAGS) $*.o $*.a $(CROSSLIBS) -o $@ -Ttext $(call GET_BASE,BASE1) --oformat coff-h8300

#  How to make barebones dymanic executable map files
%.dmap: %.dcoff
	$(CROSSNM) $< | sort > $@

#  How to disassemble coff kernel
%.dis: %.dcoff
	$(CROSSOBJDUMP) $(ODFLAGS) $*.dcoff > $@

#  How to merge map files with symbols
%.dis2: %.dmap %.dis
	$(MERGEMAP) $*.dmap $*.dis > $@


#  How to assemble
%.o: %.s
	$(CROSSAS) $< -o $@

#  How to compile assembler source for the Hitachi H8/300
%.o: %.S
	$(CROSSCC) -MD $(CROSSCFLAGS) -c $< -o $@

#  How to compile C source for the Hitachi H8/300
%.o: %.c
	$(CROSSCC) -MD $(CROSSCFLAGS) -c $< -o $@

#  How to generate an assembly listing of C source
%.s: %.c
	$(CROSSCC) $(CROSSCFLAGS) -S $< -o $@

#  How to compile C++ source for the Hitachi H8/300
%.o: %.cpp
	$(CROSSCXX) $(CROSSCXXFLAGS) -c $< -o $@

#  How to compile C++ source  for the Hitachi H8/300
%.o: %.C
	$(CROSSCXX) $(CROSSCXXFLAGS) -c $< -o $@

#  How to compile pas source
%.o: %.pas
	$(CROSSGPC) $(CROSSPFLAGS) -c $< -o $@

#  How to generate an assembly listing of Pascal source
%.s: %.pas
	$(CROSSGPC) $(CROSSPFLAGS) -c $< -S

#  How to compile XS:Lisp source for the Hitachi H8/300
# *.o: %.lsp
#  TODO:  c.f. demo/xs-lisp/Makefile.sub

#  How to compile Esterel source for the Hitachi H8/300 (use Automaton mode by default [smallest generated code footprint])
%.c: %.strl
	esterel -D $(@D) -ALego $<


#  How to make archive for extra object files
#$(PROGRAMS:%.lx=%.a): %.a: $(filter %.o,$(%_SRC:%.c=%.o) $(%_SRC:%.cpp=%.o) $(%_SRC:%.s=%.o) $(%_SRC:%.S=%.o))
#.SECONDEXPANSION:
#%.a: %.o $$($$(notdir $$*)_OBJS)
%.a: _SRC_OBJS = $(filter %.o, $($(notdir $*)_SRC:%.c=%.o) \
        $($(notdir $*)_SRC:%.cpp=%.o) $($(notdir $*)_SRC:%.s=%.o) $($(notdir $*)_SRC:%.S=%.o))
%.a: %.o
	rm -f $@
	$(CROSSAR) -sq $@ $^ $(_SRC_OBJS)

#  How to make coff files of dynamic executables (twice, for writelx)
%.dc1: %.o %.a $(CROSSLIBS:-l%=$(LIBDIR)/lib%.a) $(DYNAMIC_LDS)
	$(CROSSLD) $(DLDFLAGS) $*.o $*.a $(CROSSLIBS) -o $@ --oformat coff-h8300 -Ttext $(call GET_BASE,BASE1)

%.dc2: %.o %.a $(CROSSLIBS:-l%=$(LIBDIR)/lib%.a) $(DYNAMIC_LDS)
	$(CROSSLD) $(DLDFLAGS) $*.o $*.a $(CROSSLIBS) -o $@ --oformat coff-h8300 -Ttext $(call GET_BASE,BASE2)

#  How to make srec files from coff files (twice, for writelx)
%.ds2: %.dc2
	$(CROSSOBJCOPY) -I coff-h8300 -O symbolsrec $< $@

%.ds1: %.dc1
	$(CROSSOBJCOPY) -I coff-h8300 -O symbolsrec $< $@

%.lx: %.ds1 %.ds2 $(WRITELX)
	$(WRITELX) $*.ds1 $*.ds2 $@


#  How to make srec and bin from coff (for download)
%.srec: %.coff
	$(CROSSOBJCOPY) -I coff-h8300 -O srec $< $@

%.bin: %.coff
	$(CROSSOBJCOPY) -I coff-h8300 -O binary $< $@

### --------------------------------------------------------------------------
###                          End of FILE: Makefile.common
### ==========================================================================
