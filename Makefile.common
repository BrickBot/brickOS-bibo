### ==========================================================================
###  $Id: Makefile.common 606 2007-11-14 22:02:48Z hoenicke $
###  FILE: Makefile.common - definitions common to most brickOS Makefiles
###  bibo - another LEGO MindStorms RCX OS
### --------------------------------------------------------------------------
###       (this file is included by Makefiles that build programs)

# ----------------------------------------------------------------------------
#   Initialization
# ----------------------------------------------------------------------------

# Using $(abspath x) here so that symlinks are NOT replaced
MAKEFILE_PATH  := $(abspath $(lastword $(MAKEFILE_LIST)))
MAKEFILE_DIR   := $(abspath $(dir $(MAKEFILE_PATH)))
MAKEFILE_NAME  := $(notdir $(MAKEFILE_PATH))

# Default subdir combinations
ARCH_SYSCONF_PACKAGESUBDIR          ?= $(SYSCONFSUBDIR)/$(PACKAGE)
ARCH_INCLUDE_PACKAGESUBDIR          ?= $(INCLUDESUBDIR)/$(PACKAGE)/$(VERSION_SERIES)
ARCH_INCLUDE_KCONFIGSUBDIR          ?= $(INCLUDESUBDIR)/$(KCONFIGSUBDIR)
ARCH_INCLUDE_KCONFIG_INSTANCESUBDIR ?= $(INCLUDESUBDIR)/$(KCONFIGINSTANCESUBDIR)
ARCH_KERNELSUBDIR                   ?= $(KERNELSUBDIR)
ARCH_KERNEL_INSTANCESUBDIR          ?= $(KERNELSUBDIR)/$(KERNEL)
ARCH_LIB_INSTANCESUBDIR             ?= $(LIBSUBDIR)/$(KERNEL)


# ----------------------------------------------------------------------------
#   Environment Differentiation: Source Tree vs. Installed
# ----------------------------------------------------------------------------

# Lookup available shared libraries
CROSSLIBS = $(patsubst $(LIBDIR)/lib%.a,-l%,$(wildcard $(LIBDIR)/lib*.a))
  
# "INSTALLED_ROOT" will only be defined if installed (and not if running from source tree)
ifeq ("$(wildcard $(MAKEFILE_DIR)/makelx.sh)","")
  # Running as installed, so set the root path of the installation
  RUNTIME_ROOT         ?= $(abspath $(MAKEFILE_DIR)/../../..)
  $(info Running as installed from $(RUNTIME_ROOT))
  
  BINDIR     ?= $(RUNTIME_ROOT)/$(BINSUBDIR)
  LIBEXECDIR ?= $(RUNTIME_ROOT)/$(LIBEXECSUBDIR)
  
  ARCHDIR            ?= $(RUNTIME_ROOT)/$(ARCHSUBDIR)
  INCLUDEDIR         ?= $(ARCHDIR)/$(ARCH_INCLUDE_PACKAGESUBDIR)
  KCONFIGDIR         ?= $(ARCHDIR)/$(ARCH_INCLUDE_KCONFIGSUBDIR)
  KCONFIGINSTANCEDIR ?= $(ARCHDIR)/$(ARCH_INCLUDE_KCONFIG_INSTANCESUBDIR)
  KERNELDIR          ?= $(ARCHDIR)/$(ARCH_KERNELSUBDIR)
  KERNELINSTANCEDIR  ?= $(ARCHDIR)/$(ARCH_KERNEL_INSTANCESUBDIR)
  LIBDIR             ?= $(ARCHDIR)/$(ARCH_LIB_INSTANCESUBDIR)
  
  MULTIKERNELSUBDIR_SEARCH_PATTERN ?= /*
else
  # Running from the source tree
  RUNTIME_ROOT         ?= $(MAKEFILE_DIR)
  $(info Running relative to the source tree at $(MAKEFILE_DIR))

  BINDIR     ?= util
  LIBEXECDIR ?= util
  
  INCLUDEDIR         ?= $(INCLUDESUBDIR)
  KCONFIGDIR         ?= $(KCONFIGSUBDIR)
  KCONFIGINSTANCEDIR ?= $(KCONFIGINSTANCESUBDIR)
  KERNELDIR          ?= kernel
  KERNELINSTANCEDIR  ?= $(KERNELDIR)
  LIBDIR             ?= $(LIBSUBDIR)

  ifeq ("$(CROSSLIBS)","")
    # Lib check based on lib*.a files didn't work, so now check for source tree subfolder names
    CROSSLIBS = $(patsubst $(LIBDIR)/%/Makefile.sub,-l%,$(wildcard $(LIBDIR)/*/Makefile.sub))
  endif
  MULTIKERNELSUBDIR_SEARCH_PATTERN ?=

# Since we are not installed, we need to ensure we are properly configured
include $(MAKEFILE_DIR)/Makefile.config

$(MAKEFILE_DIR)/Makefile.config:
	$(MAKEFILE_DIR)/configure

endif


# ----------------------------------------------------------------------------
#   Directory Path Variables Configuration
# ----------------------------------------------------------------------------

# PACKAGE MAINTAINERS: Adjust here the default paths of where files were installed
#   if these paths differ from your packaging system defaults.

# Default subdirectory and file names
BINSUBDIR         ?= bin
SBINSUBDIR        ?= sbin
LIBEXECSUBDIR     ?= libexec
LIBSUBDIR         ?= lib
SYSCONFSUBDIR     ?= etc
SHAREDSTATESUBDIR ?= com
LOCALSTATESUBDIR  ?= var
INCLUDESUBDIR     ?= include
DATASUBDIR        ?= share
INFOSUBDIR        ?= info
LOCALESUBDIR      ?= locale
MANSUBDIR         ?= man
MAN1SUBDIR        ?= man1
DOCSUBDIR         ?= doc
HTMLSUBDIR        ?= html

ARCHSUBDIR            ?= $(TARGET_ARCH)
KERNELSUBDIR          ?= boot
KCONFIGSUBDIR         ?= kconfig
CONFIGDEFAULTSFILE    ?= config.h
KCONFIGFILE           ?= kernel-config.h

CONFIGDEFAULTSPATH    ?= $(INCLUDEDIR)/$(CONFIGDEFAULTSFILE)
KCONFIGINSTANCESUBDIR ?= $(KCONFIGSUBDIR)/$(KERNEL)
KCONFIGINSTANCEPATH   ?= $(KCONFIGINSTANCESUBDIR)/$(KCONFIGFILE)

#
#  Define default install paths (overridden by packaging systems)
#
DESTDIR ?= 
prefix ?= /opt/stow/${PACKAGE}
exec_prefix ?= ${prefix}

bindir ?= ${exec_prefix}/${BINSUBDIR}
sbindir ?= ${exec_prefix}/${SBINSUBDIR}
libexecdir ?= ${exec_prefix}/${LIBEXECSUBDIR}
libdir ?= ${exec_prefix}/${LIBSUBDIR}

sysconfdir ?= ${prefix}/${SYSCONFSUBDIR}
sharedstatedir ?= ${prefix}/${SHAREDSTATESUBDIR}
localstatedir ?= ${prefix}/${LOCALSTATESUBDIR}
includedir ?= ${prefix}/${INCLUDESUBDIR}
datarootdir ?= ${prefix}/${DATASUBDIR}

datadir ?= ${datarootdir}
infodir ?= ${datadir}/${INFOSUBDIR}
localedir ?= ${datadir}/${LOCALESUBDIR}
docdir ?= ${datadir}/${DOCSUBDIR}
htmldir ?= ${docdir}/${HTMLSUBDIR}
mandir ?= ${datadir}/${MANSUBDIR}
man1dir ?= ${mandir}/${MAN1SUBDIR}

pkgdatadir ?= ${datadir}/${PACKAGE}
pkgdocdir ?= ${docdir}/packages/${PACKAGE}
pkghtmldir ?= ${pkgdocdir}/${HTMLSUBDIR}
pkgexampledir ?= ${pkgdocdir}/${EXAMPLESSUBDIR}

pkgtargetdir                ?= ${prefix}/${ARCHSUBDIR}
pkgtargetincludedir         ?= ${pkgtargetdir}/${ARCH_INCLUDE_PACKAGESUBDIR}
pkgtargetkconfigdir         ?= ${pkgtargetdir}/${ARCH_INCLUDE_KCONFIGSUBDIR}
pkgtargetkconfiginstancedir ?= ${pkgtargetdir}/${ARCH_INCLUDE_KCONFIG_INSTANCESUBDIR}
pkgtargetkerneldir          ?= ${pkgtargetdir}/${ARCH_KERNELSUBDIR}
pkgtargetkernelinstancedir  ?= ${pkgtargetdir}/${ARCH_KERNEL_INSTANCESUBDIR}
pkgtargetlibinstancedir     ?= ${pkgtargetdir}/${ARCH_LIB_INSTANCESUBDIR}
pkgtargetsysconfdir         ?= ${pkgtargetdir}/${ARCH_SYSCONF_PACKAGESUBDIR}


# ----------------------------------------------------------------------------
#   Kernel Name Check
# ----------------------------------------------------------------------------

# If building a kernel or *.lx program, a name (KERNEL) needs to be specified.
#   If NOT specified, check if a single, distinct kernel name can be found.
ifndef KERNEL
  # Search both the current directory (for if running from the source tree)
  #   and any immediate subdirectories (for if installed)
  FOUND_LDS_FILES := $(wildcard $(KERNELDIR)$(MULTIKERNELSUBDIR_SEARCH_PATTERN)/*.lds)
  ifeq ($(words $(FOUND_LDS_FILES)),1)
    KERNEL := $(basename $(notdir $(FOUND_LDS_FILES)))
    # Now that KERNEL has been found and defined, DYNAMIC_LDS should work	
    $(info A single LDS file "$(FOUND_LDS_FILES)" found, for kernel "$(KERNEL)")
  else ifeq ($(words $(FOUND_LDS_FILES)),0)
    $(error ERROR: No kernel specified, and no dynamic linker "*.lds" files found under "$(KERNELDIR)")
  else
    $(error ERROR: No kernel specified, but multiple dynamic linker "*.lds" files found under "$(KERNELDIR)")
  endif
endif


# ----------------------------------------------------------------------------
#   Build Variables Configuration
# ----------------------------------------------------------------------------

#  Kernel libraries. Use second version to link all
#  libraries statically to kernel. Change CROSSLIBS, too.
#  - Version 1:  Dynamically Linked
KLIBS=-Llib -lc -lmint
KLIBRARIES=$(LIBC) $(LIBMINT)
#  - Version 2:  Statically Linked
#KLIBS=--whole-archive -lc -lmint
#KLIBRARIES=$(LIBC) $(LIBMINT)

#  User application libraries. Should be cleared if linking
#  them statically to kernel in $(KLIBS).
CROSSLIBS := $(if $(filter --whole-archive,$(KLIBS)),,$(CROSSLIBS))


#  Defines for build of native parts: utils and other host-run programs
#
COPT   =-g -Os -fno-builtin -fomit-frame-pointer
CWARN  =-Wall
CINC   =
CFLAGS =$(COPT) $(CWARN) $(CINC)

#  Defines for build of cross-compiled parts: firmware, demo programs
#
CROSSCOPT  =$(COPT) -mquickcall
CROSSCWARN =$(CWARN)
CROSSCINC  =-I$(INCLUDEDIR) -I$(KCONFIGINSTANCEDIR)
CROSSCFLAGS   =$(CROSSCOPT) $(CROSSCWARN) $(CROSSCINC) $(CROSSCDEFINES)
CROSSCXXFLAGS =-DCXX -fno-rtti -fno-exceptions $(CROSSCFLAGS)
CROSSPFLAGS   =$(CROSSCFLAGS) --extended-syntax --unit-path=$(BRICKOS_ROOT)/lib/p --automake


#  Defines for programs and scripts
#
CROSSAS =$(CROSSTOOLPREFIX)as$(CROSSTOOLSUFFIX)
CROSSAR =$(CROSSTOOLPREFIX)ar$(CROSSTOOLSUFFIX)
CROSSLD =$(CROSSTOOLPREFIX)ld$(CROSSTOOLSUFFIX)
CROSSNM =$(CROSSTOOLPREFIX)nm$(CROSSTOOLSUFFIX)
CROSSSIZE =$(CROSSTOOLPREFIX)size$(CROSSTOOLSUFFIX)
CROSSOBJCOPY =$(CROSSTOOLPREFIX)objcopy$(CROSSTOOLSUFFIX)
CROSSOBJDUMP =$(CROSSTOOLPREFIX)objdump$(CROSSTOOLSUFFIX)
CROSSRANLIB  =$(CROSSTOOLPREFIX)ranlib$(CROSSTOOLSUFFIX)
CROSSCC  =$(CROSSTOOLPREFIX)gcc$(CROSSTOOLSUFFIX)
CROSSCXX =$(CROSSTOOLPREFIX)g++$(CROSSTOOLSUFFIX)
CROSSGPC =$(CROSSTOOLPREFIX)gpc$(CROSSTOOLSUFFIX)
CROSSGDB =$(CROSSTOOLPREFIX)gdb$(CROSSTOOLSUFFIX)

#MERGEMAP = $(LIBEXECDIR)/merge-map$(EXT)
#FIXDEPS  = $(LIBEXECDIR)/fixdeps$(EXT)
GENLDS   = $(LIBEXECDIR)/genlds$(EXT)
WRITELX	 = $(LIBEXECDIR)/writelx$(EXT)

ARCH := $(shell $(CROSSCC) -dumpmachine)


#  Linker command files dynamic executables  (variable "$(KERNEL_FILES_BASE)" is without the extension).
#
KERNEL_FILES_BASE = $(KERNELINSTANCEDIR)/$(KERNEL)
KERNEL_METADATA_FILE = $(KERNEL_FILES_BASE).kmetadata
DYNAMIC_LDS = $(KERNEL_FILES_BASE).lds
DLDFLAGS    = -T $(DYNAMIC_LDS) -relax -L$(LIBDIR)


# ----------------------------------------------------------------------------
#   Header configuration lookups
# ----------------------------------------------------------------------------
GET_DEFINE_FROM_FILE = $(shell sed -n -E 's/^([[:blank:]]*#[[:blank:]]*define[[:blank:]]*$(1)[[:blank:]]*)([^[:blank:]]+([[:blank:]]*[^[:blank:]])*)([[:blank:]]*)$$/\2/p' $(2))
# Check the kerne-specific configuration and then the default configuration
PROG_MAX := $(or $(call GET_DEFINE_FROM_FILE,PROG_MAX,$(KCONFIGINSTANCEPATH)),$(call GET_DEFINE_FROM_FILE,PROG_MAX,$(CONFIGDEFAULTSPATH)),$(error ERROR: Unable to get the configuration for PROG_MAX))

# ----------------------------------------------------------------------------
#   Base address determination for relocation info
# ----------------------------------------------------------------------------
BASE1_DEFAULT = 0xb000
BASE2_DEFAULT = 0xb210

GET_CONF_FROM_FILE = $(shell [ -e $(2) ] && cat $(2) | grep -E ^$(1)[[:space:]]*=[[:space:]]*0x[0-9A-Fa-f]{4}$ | sed s/$(1)[[:space:]]*=[[:space:]]*// )
GET_BASE_FROM_LDS    = $(call GET_CONF_FROM_FILE,$(1),$(DYNAMIC_LDS))

# Tracking BASE1 and BASE2 in the Makefile provides fallback support if unable
#   to read the dynamic LDS file, but such static tracking breaks support for
#   dynamically installing and working with different kernels. Leaving support
#   for static BASE tracking for if needed but disabling by default.
ifdef RECORD_BASE_IN_MAKEFILE
#  Base addresses updated from $(DYNAMIC_LDS) in kernel/Makefile.sub, target BaseAddresses
#  (Values should be checked as kernel changes but kept as backup if GET_BASE fails)
BASE1 = 0xac44
BASE2 = 0xae54

# Use precedence ordering for obtaining BASE1 and BASE2 values:
# $(BASEx) value from $(DYNAMIC_LDS) file, $(BASEx), and then $(BASEx)_DEFAULT
GET_BASE = $(or $(call GET_BASE_FROM_LDS,$(1)),$($(1)),$($(1)_DEFAULT))

# Empty if the base has not changed, new base value if it has changed
BASE_CHANGED = $(if $(findstring $(call GET_CONF_FROM_FILE,$(1),Makefile.common),$(call GET_BASE,$(1))),,$(call GET_BASE,$(1)))

# Update the BASE1 and BASE2 addresses in Makefile.common only if there has been a change
BaseAddresses: $(KERNEL_FILES_BASE).lds
	[ -z '$(call BASE_CHANGED,BASE1)' ] || sed -i -r 's/^BASE1[[:space:]]*=[[:space:]]*0x[0-9A-Fa-f]{4}$$/BASE1 = $(call GET_BASE,BASE1)/' Makefile.common
	[ -z '$(call BASE_CHANGED,BASE2)' ] || sed -i -r 's/^BASE2[[:space:]]*=[[:space:]]*0x[0-9A-Fa-f]{4}$$/BASE2 = $(call GET_BASE,BASE2)/' Makefile.common

kernel:: BaseAddresses
else
# If not already set, lookup BASE1 and BASE2 from the dynamic LDS file
GET_BASE = $(or $($(1)),$(call GET_BASE_FROM_LDS,$(1)),$(error ERROR: Unable to get $(1) from the "$(DYNAMIC_LDS)" dynamic LDS file))
endif


# ----------------------------------------------------------------------------
#   Targets for building of cross-compiled parts: firmware, demo programs
# ----------------------------------------------------------------------------

############ new dynamic executables stuff
#  How to build executables dynamically linked to the kernel 
#  Set DYNAMIC_TEXT, DOBJECTS, DYNAMIC_LDS appropriately.

%.dcoff: %.o %.a $(DYNAMIC_LDS)
	$(CROSSLD) $(DLDFLAGS) $*.o $*.a $(CROSSLIBS) -o $@ -Ttext $(call GET_BASE,BASE1) --oformat coff-h8300

#  How to make kernel lds files
%.lds: %.coff $(GENLDS)
	$(CROSSNM) $< | sort -u | $(GENLDS) $* > $@

#  How to make barebones dymanic executable map files
%.dmap: %.dcoff
	$(CROSSNM) $< | sort > $@

#  How to disassemble coff kernel
%.dis: %.dcoff
	$(CROSSOBJDUMP) $(ODFLAGS) $*.dcoff > $@

#  How to merge map files with symbols
%.dis2: %.dmap %.dis
	$(MERGEMAP) $*.dmap $*.dis > $@


#  How to assemble
%.o: %.s
	$(CROSSAS) $< -o $@

#  How to compile assembler source for the Hitachi H8/300
%.o: %.S
	$(CROSSCC) -MD $(CROSSCFLAGS) -c $< -o $@

#  How to compile C source for the Hitachi H8/300
%.o: %.c
	$(CROSSCC) -MD $(CROSSCFLAGS) -c $< -o $@

#  How to generate an assembly listing of C source
%.s: %.c
	$(CROSSCC) $(CROSSCFLAGS) -S $< -o $@

#  How to compile C++ source for the Hitachi H8/300
%.o: %.cpp
	$(CROSSCXX) $(CROSSCXXFLAGS) -c $< -o $@

#  How to compile C++ source  for the Hitachi H8/300
%.o: %.C
	$(CROSSCXX) $(CROSSCXXFLAGS) -c $< -o $@

#  How to compile pas source
%.o: %.pas
	$(CROSSGPC) $(CROSSPFLAGS) -c $< -o $@

#  How to generate an assembly listing of Pascal source
%.s: %.pas
	$(CROSSGPC) $(CROSSPFLAGS) -c $< -S

#  How to compile XS:Lisp source for the Hitachi H8/300
# *.o: %.lsp
#  TODO:  c.f. demo/xs-lisp/Makefile.sub

#  How to compile Esterel source for the Hitachi H8/300 (use Automaton mode by default [smallest generated code footprint])
%.c: %.strl
	esterel -D $(@D) -ALego $<


#  How to make archive for extra object files
#$(PROGRAMS:%.lx=%.a): %.a: $(filter %.o,$(%_SRC:%.c=%.o) $(%_SRC:%.cpp=%.o) $(%_SRC:%.s=%.o) $(%_SRC:%.S=%.o))
#.SECONDEXPANSION:
#%.a: %.o $$($$(notdir $$*)_OBJS)
%.a: _SRC_OBJS = $(filter %.o, $($(notdir $*)_SRC:%.c=%.o) \
        $($(notdir $*)_SRC:%.cpp=%.o) $($(notdir $*)_SRC:%.s=%.o) $($(notdir $*)_SRC:%.S=%.o))
%.a: %.o
	rm -f $@
	$(CROSSAR) -sq $@ $^ $(_SRC_OBJS)

#  How to make coff files of dynamic executables (twice, for writelx)
%.dc1: %.o %.a $(CROSSLIBS:-l%=$(LIBDIR)/lib%.a) $(DYNAMIC_LDS)
	$(CROSSLD) $(DLDFLAGS) $*.o $*.a $(CROSSLIBS) -o $@ --oformat coff-h8300 -Ttext $(call GET_BASE,BASE1)

%.dc2: %.o %.a $(CROSSLIBS:-l%=$(LIBDIR)/lib%.a) $(DYNAMIC_LDS)
	$(CROSSLD) $(DLDFLAGS) $*.o $*.a $(CROSSLIBS) -o $@ --oformat coff-h8300 -Ttext $(call GET_BASE,BASE2)

#  How to make srec files from coff files (twice, for writelx)
%.ds2: %.dc2
	$(CROSSOBJCOPY) -I coff-h8300 -O symbolsrec $< $@

%.ds1: %.dc1
	$(CROSSOBJCOPY) -I coff-h8300 -O symbolsrec $< $@

%.lx: %.ds1 %.ds2 $(WRITELX)
	$(WRITELX) $*.ds1 $*.ds2 $@


#  How to make srec and bin from coff (for download)
%.srec: %.coff
	$(CROSSOBJCOPY) -I coff-h8300 -O srec $< $@

%.bin: %.coff
	$(CROSSOBJCOPY) -I coff-h8300 -O binary $< $@

### --------------------------------------------------------------------------
###                          End of FILE: Makefile.common
### ==========================================================================
