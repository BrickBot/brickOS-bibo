### ==========================================================================
###  $Id$
###  FILE: Makefile.dist - make the Lego Programs
###  bibo - another LEGO MindStorms RCX OS
### --------------------------------------------------------------------------

# NOTE: When installed via "make install", this file is renamed and included as just "Makefile"

# PACKAGE MAINTAINERS: Adjust here the default paths of where files were installed
#   if these paths differ from your packaging system defaults.
MAKEFILE_PATH  := $(realpath $(lastword $(MAKEFILE_LIST)))
MAKEFILE_DIR   := $(realpath $(dir $(MAKEFILE_PATH)))
MAKEFILE_NAME  := $(notdir $(MAKEFILE_PATH))

# Determine whether running from source tree or if installed
#   (This file is only named "Makefile" if installed)
ifeq ("$(MAKEFILE_NAME)","Makefile")
  # Running as installed
  INSTALLED_ROOT ?= $(realpath $(MAKEFILE_DIR)/../..)
  UTILDIR        ?= $(INSTALLED_ROOT)/bin
  KERNELDIR      ?= $(MAKEFILE_DIR)
  LIBDIR         ?= $(INSTALLED_ROOT)/$(ARCH)/lib
  INCLUDEDIR     ?= $(INSTALLED_ROOT)/$(ARCH)/include
else
  # Running from the source tree
  UTILDIR    ?= $(MAKEFILE_DIR)/util
  KERNELDIR  ?= $(MAKEFILE_DIR)/kernel
  LIBDIR     ?= $(MAKEFILE_DIR)/lib
  INCLUDEDIR ?= $(MAKEFILE_DIR)/include
endif


# IMPORTANT: Do not modify the commented "paths" placeholder line below
#   without also updating the "install" target in the main Makefile in the source project.
# installation paths


# Functions
#
replace_extensions=$(filter %$(2), $($(1):%.c=%$(2)) $($(1):%.cpp=%$(2)) \
        $($(1):%.s=%$(2)) $($(1):%.S=%$(2)) \
        $($(1):%.strl=%$(2)) $($(1):%.lsp=%$(2)) )

# Process "SOURCES" arg
#
ifdef SOURCES
# Handle a simple user declaration of source files names:
# The first item is the source file with the entrypoint (e.g. main() method;
#   the remaining items (if any) are any additionally-needed sources
PROGRAM_MAIN_SOURCE := $(word 1,$(SOURCES))
PROGRAM_MAIN_NAME := $(basename $(PROGRAM_MAIN_SOURCE))

# Now that the source file names are parsed, assign as if they had been
#   explicitly declared in a Makefile
PROGRAM_MAIN_SOURCES := $(PROGRAM_MAIN_SOURCE)
$(PROGRAM_MAIN_NAME)_SRC := $(filter-out $(PROGRAM_MAIN_SOURCE),$(SOURCES))
else
# Hard-coded example:
PROGRAM_MAIN_SOURCES?=helloworld.c

# extra dynamic sources  - program name (e.g. helloworld.c/.cpp) is always assumed
helloworld_SRC?= 
endif

# Program list and dependencies
#
PROGRAMS?=$(call replace_extensions,PROGRAM_MAIN_SOURCES,.lx)
PROGRAM_ADDITIONAL_SOURCES = $(foreach prog,$(basename $(PROGRAMS)),$($(prog)_SRC))
PROGRAM_OBJECTS = $(call replace_extensions,PROGRAM_ADDITIONAL_SOURCES,.o)
-include $(PROGRAMS:%.lx=%.d) $(PROGRAM_OBJECTS:%.o=%.d)


# Default target
#
all:: $(PROGRAMS) $(patsubst %.lx,%.a,$(PROGRAMS)) $(patsubst %.o,%.a,$(PROGRAM_OBJECTS))

# Tell Make not to auto-delete:
#   *.o files are needed by the emulator when loading a program as a *.a file
.SECONDARY:: $(PROGRAM_OBJECTS)


include $(MAKEFILE_DIR)/Makefile.user


# Verify that a valid kernel has been specified and a corresponding *.lds file exists
#
ifdef KERNEL
ifeq ($(words $(wildcard $(DYNAMIC_LDS))),0)
  $(error ERROR: File "$(DYNAMIC_LDS)" for kernel "$(KERNEL)" not found)
else
  $(info Found "$(DYNAMIC_LDS)" for kernel "$(KERNEL)")
endif
else
  FOUND_LDS_FILES := $(wildcard $(KERNELDIR)/*.lds)
  ifeq ($(words $(FOUND_LDS_FILES)),1)
    KERNEL := $(basename $(notdir $(FOUND_LDS_FILES)))
    # Now that KERNEL has been found and defined, DYNAMIC_LDS should work	
    $(info A single LDS file "$(DYNAMIC_LDS)" found, for kernel "$(KERNEL)")
  else ifeq ($(words $(FOUND_LDS_FILES)),0)
    $(error ERROR: No kernel specified, and no dynamic linker "*.lds" files found under "$(KERNELDIR)")
  else
    $(error ERROR: No kernel specified, but multiple dynamic linker "*.lds" files found under "$(KERNELDIR)")
  endif
endif


# Targets
#
TAGS:
	-etags *.c $(INCLUDEDIR)/*.h $(INCLUDEDIR)/*/*.h 

clean::
	rm -f *.dis *.dis2 *.s *.ds1 *.ds2 *.dmap *.dcoff 
	rm -f *.srec *.coff

realclean:: clean
	rm -f *~ *.bak *.lx *.a *.o TAGS

.PHONY: all clean realclean

### --------------------------------------------------------------------------
###                          End of FILE: demo/Makefile
### ==========================================================================
